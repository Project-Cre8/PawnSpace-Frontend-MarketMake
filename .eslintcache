[{"/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/index.js":"1","/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/reportWebVitals.js":"2","/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/App.js":"3","/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/contractObjects.js":"4","/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/contractData.js":"5","/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/contractEvents.js":"6","/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/Components/baseScreen.js":"7","/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/Components/sider.js":"8"},{"size":500,"mtime":1610736613517,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1610736613517,"results":"11","hashOfConfig":"10"},{"size":3627,"mtime":1610825177653,"results":"12","hashOfConfig":"10"},{"size":1451,"mtime":1610823775819,"results":"13","hashOfConfig":"10"},{"size":1455,"mtime":1610823775818,"results":"14","hashOfConfig":"10"},{"size":1121,"mtime":1610823775818,"results":"15","hashOfConfig":"10"},{"size":2862,"mtime":1610828006634,"results":"16","hashOfConfig":"10"},{"size":1329,"mtime":1610827973133,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1p8jpl8",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/index.js",[],["37","38"],"/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/reportWebVitals.js",[],"/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/App.js",[],"/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/contractObjects.js",["39"],"import React, { useEffect } from \"react\";\nimport ContractData from './contractData';\n\nconst Web3 = require(\"web3\");\n\n/*\nLayer 2 (ContractObjects.js): This component will check if Metamask exists, then instantiate web3 (using the Metamask provider), and then instantiate a contract object for each smart contract with which our app interacts. To instantiate a contract object, we will need the ABI for each smart contract. We will have these in a separate folder. We will pass these objects (along with state from layer 1) down to layer 3.\n*/\n\nfunction ContractObjects({ hasMeta, maskAddress, network, unlocked, enable}) {\n  const [loaded, setLoaded] = React.useState(false);\n  const [web3Obj, setWeb3Obj] = React.useState({});\n\n  useEffect(() => {\n    if (hasMeta && network === \"42\" && unlocked) {\n      // web3 instance\n      const web3 = new Web3(window.web3.currentProvider);\n\n      // create contract objects once we have contracts made\n\n      // set web3 and other contract objects to state\n      setWeb3Obj(web3);\n\n      setLoaded(true);\n    } else {\n      setLoaded(true);\n    }\n  }, []);\n\n  if (loaded) {\n    return (\n      <ContractData \n        hasMeta={hasMeta}\n        network={network}\n        unlocked={unlocked}\n        maskAddress={maskAddress}\n        enable={enable}\n        web3={web3Obj}\n      />\n    );\n  } else {\n    return (\n      <div>\n        LOADING PLACEHOLDER\n      </div>\n    )\n  }\n  \n}\n\n\nexport default ContractObjects;\n","/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/contractData.js",["40","41"],"import React, { useEffect } from \"react\";\nimport ContractEvents from './contractEvents';\n\n/*\nLayer 3 (contractData.js): This component is going to house the main logic for calling general (global variables) and user-specific smart contract data. General data will be called from a useEffect hook if Metamask exists in the browser (on every render). Depending on how much general data we will be calling, we may structure this into an object variable and set it to state (then send it down as prop).\n\nThe logic for calling user NFT data is challenging, because the more NFTs the user owns, the more calls our app needs to make. For this reason, we are going to place the logic for obtaining user NFT data into functions, and passing these down as props so that they can be called from a button click on a visual element. These functions need to stay in this layer, because the data object they will build will be passed into layer 4, which needs to have the ability to easily modify this data.\n*/\n\nfunction ContractData({ hasMeta, network, unlocked, maskAddress, enable, web3 }) {\n  const [loaded, setLoaded] = React.useState(false);\n\n  // will build this once we are ready to bring in contracts\n  useEffect(() => {\n    \n  }, []);\n\n  return (\n    <ContractEvents \n      hasMeta={hasMeta}\n      network={network}\n      unlocked={unlocked}\n      maskAddress={maskAddress}\n      enable={enable}\n      web3={web3}\n    />\n  );\n}\n\n\nexport default ContractData;\n\n","/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/contractEvents.js",[],"/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/Components/baseScreen.js",["42"],"/Users/erictrimble/Desktop/env/PawnSpace-Frontend-MarketMake/src/Components/sider.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":28,"column":6,"nodeType":"49","endLine":28,"endColumn":8,"suggestions":"50"},{"ruleId":"51","severity":1,"message":"52","line":11,"column":10,"nodeType":"53","messageId":"54","endLine":11,"endColumn":16},{"ruleId":"51","severity":1,"message":"55","line":11,"column":18,"nodeType":"53","messageId":"54","endLine":11,"endColumn":27},{"ruleId":"51","severity":1,"message":"56","line":1,"column":17,"nodeType":"53","messageId":"54","endLine":1,"endColumn":26},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'hasMeta', 'network', and 'unlocked'. Either include them or remove the dependency array.","ArrayExpression",["59"],"no-unused-vars","'loaded' is assigned a value but never used.","Identifier","unusedVar","'setLoaded' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [hasMeta, network, unlocked]",{"range":"62","text":"63"},[1092,1094],"[hasMeta, network, unlocked]"]